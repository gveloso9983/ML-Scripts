# -*- coding: utf-8 -*-
"""Random Forest Classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12ehxDbv9oki74fdG_qGt0B4VAmyYlijd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.ensemble import RandomForestClassifier

"""##1ª PARTE - Load, prepare and split data"""

df_raw = pd.read_csv("dataset_balanced.csv")
df_raw.shape

"""Normalização de dados (Não fazer em problemas de classificação, mas esta aqui para teste)"""

# min_max_scaler = preprocessing.MinMaxScaler()
# np_scaled = min_max_scaler.fit_transform(df_raw)
# cols = df_raw.columns
# df_normalized = pd.DataFrame(np_scaled, columns = cols)
# df_normalized

"""Bin de Idade

"""

df_raw['Idade'] = pd.qcut(df_raw['Idade'], q=6, precision=0, labels=[0,1,2,3,4,5])



"""Separação da Label dos Dados"""

# df_data = df_normalized.drop(columns='UTI')
# df_label = df_normalized['UTI']

df_data = df_raw.drop(columns='UTI')
df_label = df_raw['UTI']
df_label

"""Drop Features Irrelevantes (Com baixa correlação)"""

#df_data = df_data.drop(columns=['CS_GESTANT','CO_PAIS','SURTO_SG','OUTRO_SIN','RAIOX_RES','CLASSI_FIN','FADIGA','PERD_PALA'])

df_data_e = df_data.drop(columns=['CO_PAIS','PUERPERA','SIND_DOWN','HEMATOLOGI','HEPATICA','TP_IDADE'])

"""Split Data"""

X_train, X_test, y_train, y_test = train_test_split(df_data_e, df_label, test_size=0.3, random_state=50)

print("Train data : ",X_train.shape," Train label: ",y_train.shape," Test data: ",X_test.shape," Test label: ",y_test.shape)

"""##Classificador"""

#Criar classificador
rfc = RandomForestClassifier(n_estimators=1000)

#Treinar o modelo e prever
rfc.fit(X_train, y_train)

feature_imp = pd.Series(rfc.feature_importances_,index=df_data_e.columns).sort_values(ascending=True)
feature_imp

y_pred = rfc.predict(X_test)

"""##Precisão do Modelo"""

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",accuracy_score(y_test, y_pred))